[
["index.html", "A Minimal ML Example Chapter 1 Basic tutorial 1.1 新增章節方式", " A Minimal ML Example M-Team 2019-03-04 Chapter 1 Basic tutorial m-clark ML 1.1 新增章節方式 bookdown是稍微改良強化的rmarkdown，可以用來生成電子書。 檔名固定為X-filename.Rmd，bookdown會自動按照阿拉伯數字(X)生成章節。 # 表示新增標題，每當需要一個新的章節，即可開一個新的Rmd，第一行都是打一個#，且無需再留yaml # 大標 ## 次標。並依此類推 {-}，在#後面加上{-}，可以不顯示標題數字。可斟酌使用。 畢竟有時候看到5.1.1.1，有點煩躁 可以直接看任意一個檔案結構作為例子即可瞭解。 之後可以在個人的branch裡面整理好負責的章節，並且pull request到bookdown_only這個branch並且進行生成並發布到RStudio伺服器。 生成電子書指令： bookdown::render_book(&quot;local&quot;) 可以在publish之前先本機生成，檢查一下有沒有要再改的地方。 發布電子書指令： bookdown::publish_book() "],
["regularized-regression.html", "Chapter 2 Regularized Regression 2.1 check distribution after normalization", " Chapter 2 Regularized Regression wine &lt;- read.csv(&quot;~/Dropbox/M-Team/ML/wine.csv&quot;) str(wine) ## &#39;data.frame&#39;: 6497 obs. of 15 variables: ## $ X : int 0 1 2 3 4 5 6 7 8 9 ... ## $ fixed.acidity : num 7.4 7.8 7.8 11.2 7.4 7.4 7.9 7.3 7.8 7.5 ... ## $ volatile.acidity : num 0.7 0.88 0.76 0.28 0.7 0.66 0.6 0.65 0.58 0.5 ... ## $ citric.acid : num 0 0 0.04 0.56 0 0 0.06 0 0.02 0.36 ... ## $ residual.sugar : num 1.9 2.6 2.3 1.9 1.9 1.8 1.6 1.2 2 6.1 ... ## $ chlorides : num 0.076 0.098 0.092 0.075 0.076 0.075 0.069 0.065 0.073 0.071 ... ## $ free.sulfur.dioxide : num 11 25 15 17 11 13 15 15 9 17 ... ## $ total.sulfur.dioxide: num 34 67 54 60 34 40 59 21 18 102 ... ## $ density : num 0.998 0.997 0.997 0.998 0.998 ... ## $ pH : num 3.51 3.2 3.26 3.16 3.51 3.51 3.3 3.39 3.36 3.35 ... ## $ sulphates : num 0.56 0.68 0.65 0.58 0.56 0.56 0.46 0.47 0.57 0.8 ... ## $ alcohol : num 9.4 9.8 9.8 9.8 9.4 9.4 9.4 10 9.5 10.5 ... ## $ quality : Factor w/ 2 levels &quot;bad&quot;,&quot;good&quot;: 1 1 1 2 1 1 1 2 2 1 ... ## $ color : Factor w/ 2 levels &quot;red&quot;,&quot;white&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ white : int 0 0 0 0 0 0 0 0 0 0 ... library(caret) library(tidyverse) library(glmnet) library(class) library(randomForest) library(e1071) library(ggplot2) set.seed(1234) # so that the indices will be the same when re-run # 抽出80%樣本來train, output format is matrix trainIndices = createDataPartition(wine$quality, p=.8, list=F) # delete highly correlated free.sulfur and density wine_train = wine %&gt;% select(-free.sulfur.dioxide, -density, -color, -white) %&gt;% slice(trainIndices) wine_test = wine %&gt;% select(-free.sulfur.dioxide, -density, -color, -white) %&gt;% slice(-trainIndices) 2.1 check distribution after normalization wine_trainplot = select(wine_train, -quality) %&gt;% preProcess(method=&#39;range&#39;) %&gt;% #標準化處理range =&gt; (x-min)/(max-min) predict(newdata= select(wine_train, -quality)) #利用predict函數顯示出處理好的矩陣 featurePlot(wine_trainplot, wine_train$quality, &#39;box&#39;) # cross validation 10 cv_opts = trainControl(method=&#39;cv&#39;, number=10) #定義模型訓練參數，劃分十組交叉驗證（使用repeatedcv可重複劃分） regreg_opts = expand.grid(.alpha = seq(.1, 1, length = 5), .lambda = seq(.1, .5, length = 5)) #25種組合(決定lamda重要度？) results_regreg = train(quality~., data=wine_train, method = &quot;glmnet&quot;, trControl = cv_opts, preProcess = c(&quot;center&quot;, &quot;scale&quot;), #指定數據標準化，&quot;center&quot;和&quot;scale&quot;。其中center表示預測變量減去均值 tuneGrid = regreg_opts) results_regreg #kappa是一統計量指標衡量預測值與實質的差距 ## glmnet ## ## 5199 samples ## 10 predictor ## 2 classes: &#39;bad&#39;, &#39;good&#39; ## ## Pre-processing: centered (10), scaled (10) ## Resampling: Cross-Validated (10 fold) ## Summary of sample sizes: 4679, 4680, 4679, 4679, 4679, 4679, ... ## Resampling results across tuning parameters: ## ## alpha lambda Accuracy Kappa ## 0.100 0.1 0.7255274 0.35008588 ## 0.100 0.2 0.6949431 0.24105753 ## 0.100 0.3 0.6730163 0.15106604 ## 0.100 0.4 0.6516660 0.07063484 ## 0.100 0.5 0.6364689 0.01492729 ## 0.325 0.1 0.7139856 0.31350196 ## 0.325 0.2 0.6703273 0.13726298 ## 0.325 0.3 0.6330066 0.00000000 ## 0.325 0.4 0.6330066 0.00000000 ## 0.325 0.5 0.6330066 0.00000000 ## 0.550 0.1 0.7043676 0.27703468 ## 0.550 0.2 0.6330066 0.00000000 ## 0.550 0.3 0.6330066 0.00000000 ## 0.550 0.4 0.6330066 0.00000000 ## 0.550 0.5 0.6330066 0.00000000 ## 0.775 0.1 0.6882142 0.21713151 ## 0.775 0.2 0.6330066 0.00000000 ## 0.775 0.3 0.6330066 0.00000000 ## 0.775 0.4 0.6330066 0.00000000 ## 0.775 0.5 0.6330066 0.00000000 ## 1.000 0.1 0.6630178 0.11541687 ## 1.000 0.2 0.6330066 0.00000000 ## 1.000 0.3 0.6330066 0.00000000 ## 1.000 0.4 0.6330066 0.00000000 ## 1.000 0.5 0.6330066 0.00000000 ## ## Accuracy was used to select the optimal model using the largest value. ## The final values used for the model were alpha = 0.1 and lambda = 0.1. ggplot(results_regreg) alpha=mixing percentage lambda=regularization parameter preds_regreg = predict(results_regreg, wine_test) good_observed = wine_test$quality confusionMatrix(preds_regreg, good_observed, positive=&#39;good&#39;) ## Confusion Matrix and Statistics ## ## Reference ## Prediction bad good ## bad 197 76 ## good 279 746 ## ## Accuracy : 0.7265 ## 95% CI : (0.7014, 0.7506) ## No Information Rate : 0.6333 ## P-Value [Acc &gt; NIR] : 6.665e-13 ## ## Kappa : 0.3531 ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9075 ## Specificity : 0.4139 ## Pos Pred Value : 0.7278 ## Neg Pred Value : 0.7216 ## Prevalence : 0.6333 ## Detection Rate : 0.5747 ## Detection Prevalence : 0.7897 ## Balanced Accuracy : 0.6607 ## ## &#39;Positive&#39; Class : good ## The lower bound (and p-value) suggests we are statistically predicting better than the No Information Rate (i.e., just guessing the more prevalent ‘Bad’ category) -&gt; 猜好的比猜壞的還強 confusionMatrix(preds_regreg, good_observed, positive=&#39;good&#39;, mode=&#39;prec_recall&#39;) ## Confusion Matrix and Statistics ## ## Reference ## Prediction bad good ## bad 197 76 ## good 279 746 ## ## Accuracy : 0.7265 ## 95% CI : (0.7014, 0.7506) ## No Information Rate : 0.6333 ## P-Value [Acc &gt; NIR] : 6.665e-13 ## ## Kappa : 0.3531 ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Precision : 0.7278 ## Recall : 0.9075 ## F1 : 0.8078 ## Prevalence : 0.6333 ## Detection Rate : 0.5747 ## Detection Prevalence : 0.7897 ## Balanced Accuracy : 0.6607 ## ## &#39;Positive&#39; Class : good ## "],
["k-nearest-neighbors.html", "Chapter 3 k-nearest Neighbors", " Chapter 3 k-nearest Neighbors knn_opts = data.frame(k=c(seq(3, 11, 2), 25, 51, 101)) knn_opts ## k ## 1 3 ## 2 5 ## 3 7 ## 4 9 ## 5 11 ## 6 25 ## 7 51 ## 8 101 results_knn = train(quality~., data=wine_train, method=&#39;knn&#39;, preProcess=c(&#39;center&#39;, &#39;scale&#39;), trControl=cv_opts, tuneGrid = knn_opts) results_knn ## k-Nearest Neighbors ## ## 5199 samples ## 10 predictor ## 2 classes: &#39;bad&#39;, &#39;good&#39; ## ## Pre-processing: centered (10), scaled (10) ## Resampling: Cross-Validated (10 fold) ## Summary of sample sizes: 4679, 4679, 4679, 4680, 4679, 4679, ... ## Resampling results across tuning parameters: ## ## k Accuracy Kappa ## 3 0.7670720 0.4901107 ## 5 0.7661112 0.4848680 ## 7 0.7620724 0.4740174 ## 9 0.7601512 0.4700814 ## 11 0.7609215 0.4691504 ## 25 0.7493794 0.4373009 ## 51 0.7470705 0.4273110 ## 101 0.7401438 0.4042036 ## ## Accuracy was used to select the optimal model using the largest value. ## The final value used for the model was k = 3. preds_knn = predict(results_knn, wine_test) confusionMatrix(preds_knn, good_observed, positive=&#39;good&#39;) ## Confusion Matrix and Statistics ## ## Reference ## Prediction bad good ## bad 296 147 ## good 180 675 ## ## Accuracy : 0.7481 ## 95% CI : (0.7235, 0.7715) ## No Information Rate : 0.6333 ## P-Value [Acc &gt; NIR] : &lt; 2e-16 ## ## Kappa : 0.4496 ## Mcnemar&#39;s Test P-Value : 0.07679 ## ## Sensitivity : 0.8212 ## Specificity : 0.6218 ## Pos Pred Value : 0.7895 ## Neg Pred Value : 0.6682 ## Prevalence : 0.6333 ## Detection Rate : 0.5200 ## Detection Prevalence : 0.6587 ## Balanced Accuracy : 0.7215 ## ## &#39;Positive&#39; Class : good ## "],
["neutral-network.html", "Chapter 4 Neutral Network 機器學習步驟", " Chapter 4 Neutral Network 機器學習步驟 流程圖 CPU平行運算 開始 library(doParallel) cl = makeCluster(2) registerDoParallel(cl) 結束 stopCluster(cl) 切割資料 library(gplots) library(caret) library(tidyverse) wine &lt;- read.csv(&#39;~/Dropbox/M-team/ML/wine.csv&#39;) set.seed(1234) # so that the indices will be the same when re-run trainIndices = createDataPartition(wine$quality, p=.8, list=F) wine_train = wine %&gt;% select(-X,-free.sulfur.dioxide, -density, -color, -white) %&gt;% slice(trainIndices) wine_test = wine %&gt;% select(-X,-free.sulfur.dioxide, -density, -color, -white) %&gt;% slice(-trainIndices) wine_trainplot = select(wine_train, -quality) %&gt;% preProcess(method=&#39;range&#39;) %&gt;% predict(newdata= select(wine_train, -quality)) good_observed = wine_test$quality 參考資料： https://topepo.github.io/caret/train-models-by-tag.html 所以的模型都先看一下train-model by tag，來看一下基本設定，以及模型特有的東西。 How the model is evaluated Here we choose: k-fold Cross-validation 參考資料：https://hyp.is/lc7vUNc6EeixLm87hkeo7A/m-clark.github.io/introduction-to-machine-learning/concepts.html #10-fold CV here cv_opts = trainControl(method=&#39;cv&#39;, number=10) # cross-validation Pre-processing setup What kind of data transformation is needed for the algorithm? NNL: data requires rescaling method = “center” subtracts the mean (\\(mean(x)\\)) of the predictor’s data (again from the data in x) from the predictor values while method = “scale” divides by the standard deviation (\\(sd(x)\\)). \\[\\hat{x}_i=\\frac{x_i-mean(x)}{sd(x)}\\] tuneLength=5 表示 size,decay 是個5x5的grid空間。 results_nnet = train(quality~., data=wine_train, method=&#39;avNNet&#39;, trControl=cv_opts, tuneLength=5, preProcess=c(&#39;center&#39;, &#39;scale&#39;), trace=F, maxit=10) results_nnet ggplot(results_nnet) ggplot(results_nnet) + labs(x=&#39;Number of Hidden Units&#39;) + scale_x_continuous(breaks = c(1,3,5,7,9)) preds_nnet = predict(results_nnet, wine_test) confusionMatrix(preds_nnet, good_observed, positive=&#39;good&#39;) #results_nnet1 = train(quality~., # data=wine_train, #method=&#39;mlpWeightDecayML&#39;, #trControl=cv_opts, #preProcess=c(&#39;center&#39;, &#39;scale&#39;), #trace=F, #maxit=10) #results_nnet1 不一定要用tuneLength由電腦選grid[值]，也可改成如下的手動設定： regreg_opts = expand.grid(size = seq(.1, 1, length = 5), decay = seq(.1, .5, length = 5)) results_regreg = train( ... tuneGrid = regreg_opts) "],
["neutral-network2.html", "Chapter 5 Neutral Network2 機器學習步驟 類神經網絡(NNet)", " Chapter 5 Neutral Network2 機器學習步驟 流程圖 啟用CPU平行運算 library(doParallel) cl = makeCluster(2) registerDoParallel(cl) #stopCluster(cl)關閉 資料處理 library(gplots) library(caret) library(tidyverse) wine &lt;- read.csv(&#39;~/Dropbox/M-team/ML/wine.csv&#39;) wine$quality=factor(wine$quality) set.seed(1234) # so that the indices will be the same when re-run trainIndices = createDataPartition(wine$quality, p=.8, list=F) wine_train = wine %&gt;% select(-X,-free.sulfur.dioxide, -density, -color, -white) %&gt;% slice(trainIndices) wine_test = wine %&gt;% select(-X,-free.sulfur.dioxide, -density, -color, -white) %&gt;% slice(-trainIndices) wine_trainplot = select(wine_train, -quality) %&gt;% preProcess(method=&#39;range&#39;) %&gt;% predict(newdata= select(wine_train, -quality)) good_observed = wine_test$quality 類神經網絡(NNet) 參考資料： https://topepo.github.io/caret/train-models-by-tag.html 所以的模型都先看一下train-model by tag，來看一下基本設定，以及模型特有的東西。 How the model is evaluated Here we choose: k-fold Cross-validation 參考資料：https://hyp.is/lc7vUNc6EeixLm87hkeo7A/m-clark.github.io/introduction-to-machine-learning/concepts.html 10-fold CV here cv_opts = trainControl(method=&#39;cv&#39;, number=10) # cross-validation Pre-processing setup What kind of data transformation is needed for the algorithm? NNL: data requires rescaling method = “center” subtracts the mean (\\(mean(x)\\)) of the predictor’s data (again from the data in x) from the predictor values while method = “scale” divides by the standard deviation (\\(sd(x)\\)). \\[\\hat{x}_i=\\frac{x_i-mean(x)}{sd(x)}\\] (Tuning) parameter set setup What are the tuning parameters size: Number of hidden units decay: 如下式數值分析的\\(\\eta\\) \\[\\theta_{i+1}=\\theta_{i}-\\eta\\frac{\\delta\\ Objectivefun(\\theta_i)}{\\delta \\theta}\\] tuneLength=5 表示 size,decay 是個5x5的grid空間。 results_nnet = train(quality~., data=wine_train, method=&#39;avNNet&#39;, trControl=cv_opts, tuneLength=5, preProcess=c(&#39;center&#39;, &#39;scale&#39;), trace=F, maxit=10) results_nnet ggplot(results_nnet) ggplot(results_nnet) + labs(x=&#39;Number of Hidden Units&#39;) + scale_x_continuous(breaks = c(1,3,5,7,9)) preds_nnet = predict(results_nnet, wine_test) confusionMatrix(preds_nnet, good_observed, positive=&#39;good&#39;) #results_nnet1 = train(quality~., # data=wine_train, #method=&#39;mlpWeightDecayML&#39;, #trControl=cv_opts, #preProcess=c(&#39;center&#39;, &#39;scale&#39;), #trace=F, #maxit=10) #results_nnet1 不一定要用tuneLength由電腦選grid[值]，也可改成如下的手動設定： regreg_opts = expand.grid(size = seq(.1, 1, length = 5), decay = seq(.1, .5, length = 5)) results_regreg = train( ... tuneGrid = regreg_opts) "],
["trees-and-forests.html", "Chapter 6 Trees and Forests", " Chapter 6 Trees and Forests 參考資料：https://topepo.github.io/caret/train-models-by-tag.html#Random_Forest 概念 Decision tree classifier Basic concept: 非常清楚的說明 scikit code documentation Random forest classifier 給定一組training data，演算法會決定那一棵樹最適合它(?)。Random forest透過Boostrapping產生如1000個training data，每個用來找一棵最適合它的樹，最後以這1000顆樹來衡量它對真正test data的預測（採多數決）。 Cross-Validation &amp; Pre processing 同前 Tuning parameters mtry: 隨機選出來用來架構樹之節點的特徵變數個數 In addition, when splitting a node during the construction of the tree, the split that is chosen (即用什麼特徵變數來進一步分類) is no longer the best split among all features. Instead, the split that is picked is the best split among a random subset of the features. …scikit code documentation ntree: 透過Boostrapping來產生「找樹用的」training data(一組樣本找一顆)。 rf_opts = data.frame(mtry=c(2:6)) results_rf = train(quality~., data = wine_train, method = &#39;rf&#39;, preProcess = c(&#39;center&#39;, &#39;scale&#39;), trControl = cv_opts, tuneGrid = rf_opts, localImp = T, ntree=100) results_rf preds_rf = predict(results_rf, wine_test) preds_rf confusionMatrix(preds_rf, good_observed, positive=&#39;good&#39;) 各別變數的重要性 參考資料: https://cran.rstudio.com/web/packages/randomForestExplainer/vignettes/randomForestExplainer.html 基本概念 varImp(results_rf) 重要性與樹的結構關連 library(randomForestExplainer) plot_min_depth_distribution(results_rf$finalModel) plot_min_depth_interactions(results_rf$finalModel, k=7) 4.3 交叉項的重要性 ? 用來更加突顯某一變數帶給其他變數的重要性？ multi_imps = measure_importance(results_rf$finalModel) plot_importance_ggpairs(multi_imps) 視覺化的圖，是預測的結果，若預測結果是0.8，表示Random Forest若有1000顆樹，有800顆樹認為他是好的，可是若看到是紅色的，表示本質上他是壞的，這樣就是不成功的預測。很順利的Random Forest就會把它分個很開，很成功。 # https://arxiv.org/pdf/1501.07196 # tibble causes problem so convert wine_train to standard df. library(ggRandomForests) rf2 = rfsrc(formula = quality ~., data = data.frame(wine_train), mtry = results_rf$finalModel$mtry) gg_v = gg_variable(rf2) gg_md = gg_minimal_depth(rf2) # We want the top two ranked minimal depth variables only xvar = gg_md$topvars[1:2] plot(gg_v, xvar=xvar, panel=TRUE, partial=TRUE, alpha=.1) LIME 每一瓶酒 Permute the data n times to create data with similar distributional properties to the original. 創造相似的酒（特徵變化要符合原始資料特徴間的統計性質，如變異及相關程度） Get similarity scores of the permuted observations to the observations you wish to explain. 依相似度要計算與原本那瓶酒的 「相似度」，之後權重用。 Make predictions with the permuted data based on the ML model. 對新樣本做ML分類。 Select m features (e.g. forward selection, lasso) best describing the complex model outcome from the permuted data. 選擇一組你想理解對ML結果影響重要的特徵。 Fit a simple model, e.g. standard regression, predicting the predictions from the ML model with the m features, where observations are weighted by similarity to the to-be-explained observations. 對摸擬樣本為如好酒的機率，對這組特徵進行加權迴歸，係數值越大的越重要。 圖形解釋 示範程式 set.seed(1234) sample_index = sample(1:nrow(wine_test), 5) sample_test = wine_test %&gt;% slice(sample_index) %&gt;% select(-good) library(lime) rf_lime = lime(wine_train, results_rf) rf_explain = explain(sample_test, rf_lime, n_features = 3, feature_select = &#39;highest_weights&#39;, labels = &#39;Good&#39;) plot_features(rf_explain) plot_explanations(rf_explain) "],
["trees-and-forests2.html", "Chapter 7 Trees and Forests2 隨機森林", " Chapter 7 Trees and Forests2 隨機森林 參考資料：https://topepo.github.io/caret/train-models-by-tag.html#Random_Forest 概念 Decision tree classifier Basic concept: 非常清楚的說明 scikit code documentation Random forest classifier 給定一組training data，演算法會決定那一棵樹最適合它(?)。Random forest透過Boostrapping產生如1000個training data，每個用來找一棵最適合它的樹，最後以這1000顆樹來衡量它對真正test data的預測（採多數決）。 Cross-Validation &amp; Pre processing 同前 Tuning parameters mtry: 隨機選出來用來架構樹之節點的特徵變數個數 In addition, when splitting a node during the construction of the tree, the split that is chosen (即用什麼特徵變數來進一步分類) is no longer the best split among all features. Instead, the split that is picked is the best split among a random subset of the features. …scikit code documentation ntree: 透過Boostrapping來產生「找樹用的」training data(一組樣本找一顆)。 rf_opts = data.frame(mtry=c(2:6)) results_rf = train(quality~., data = wine_train, method = &#39;rf&#39;, preProcess = c(&#39;center&#39;, &#39;scale&#39;), trControl = cv_opts, tuneGrid = rf_opts, localImp = T, ntree=10) results_rf make confusionm matrix 參考資料：https://hyp.is/f2kmRgEUEemKAFeGta_7RA/m-clark.github.io/introduction-to-machine-learning/opening-the-black-box.html preds_rf = predict(results_rf, wine_test) preds_rf confusionMatrix(preds_rf, good_observed, positive=&#39;good&#39;) 利用confusionMatrix觀察模型衡量指標（準確率、召回率．．．）並依照研究問題判斷模型適不適合。 變數重要性衡量 參考資料: https://cran.rstudio.com/web/packages/randomForestExplainer/vignettes/randomForestExplainer.html VIMP 概念：利用特徵經過置換前與置換後的誤差影響，來衡量該特徵的重要性。 步驟： 利用每棵樹的分類模型來預測自己的OOB樣本，並計算錯誤率。 OOB：在建構每棵樹的時候，我們對訓練集使用了不同的bootstrap sample。所以對於每棵樹而言，大约有1/3的資料點是沒有參與該棵樹的生成，他們就是該棵樹的OOB样本。 對想了解該特徵重要性的特徵進行隨機打亂，例如：把各資料點的「酒精濃度」進行隨機打亂。 利用原隨機森林模型進行預測得到新的outcome。 計算每棵樹新的OOB樣本錯誤率。 對於每棵樹擾亂特徵前後所得到的錯誤率相減並平均。 得出因該特徵擾亂後而導致的平均誤差上升多少，越高代表該變數越重要。 varImp(results_rf) Minimal depth 概念：每棵樹在生成每個節點時都會有一個特徵，在樹越上層（越淺）的特徵重要程度會越大，利用此特點來計算特徵的平均最小深度觀察特徵的重要性。 補充：假設森林有兩棵樹，A樹中特徵「酒精濃度」出現在第一層，B樹中「酒精濃度」出現在第二層與第四層，那麼平均最小深度為(\\(\\frac{7}{3}\\)) library(randomForestExplainer) plot_min_depth_distribution(results_rf$finalModel) plot_min_depth_interactions(results_rf$finalModel, k=7) Other Measures 參考資料：https://cran.r-project.org/web/packages/randomForestExplainer/vignettes/randomForestExplainer.html multi_imps = measure_importance(results_rf$finalModel) plot_importance_ggpairs(multi_imps) 觀察兩兩變數之關係 參考資料：ggRandomForests https://arxiv.org/pdf/1501.07196 # tibble causes problem so convert wine_train to standard df. library(ggRandomForests) rf2 = rfsrc(formula = quality ~., data = data.frame(wine_train), mtry = results_rf$finalModel$mtry) gg_v = gg_variable(rf2) gg_md = gg_minimal_depth(rf2) gg_v gg_md xvar = gg_md$topvars[1:2]#表示取出前兩個最重要的變數。 plot(gg_v, xvar=xvar, panel=TRUE, partial=TRUE, alpha=.1) 圖中縱軸為模型判定為good的機率，每一個點代表一個資料點，顏色為該資料點的真實outcome，以點(10,0.75,紅)為例；表示有一瓶酒，其酒精濃度為10且1000棵樹裡面有750棵說他是good(0.75)，但它實際上是壞的（紅色）。 LIME LIME 想要解決的問題：找到一個容易解釋的模型 g 解釋為什麼一個個體會被分類到f預測的類別；f是依據什麼特徵來分類進一步了解各特徵的重要性。 參考資料： https://medium.com/@kstseng/lime-local-interpretable-model-agnostic-explanation-%E6%8A%80%E8%A1%93%E4%BB%8B%E7%B4%B9-a67b6c34c3f8 步驟： 每一瓶酒 Permute the data n times to create data with similar distributional properties to the original. 創造相似的酒（特徵變化要符合原始資料特徴間的統計性質，如變異及相關程度）。 擾動樣本：進行有意義的擾動（改變\\({x}_i\\)的幾個特徵值），產生新的輸入資料\\({z}_i\\)。 Get similarity scores of the permuted observations to the observations you wish to explain. 依相似度要計算與原本那瓶酒的 「相似度」；與原資料的距離越近者給予的係數 \\(\\pi_{{x}_i}\\) 越大，之後權重用。 Make predictions with the permuted data based on the ML model. 對新樣本(\\({z}_i\\))做ML分類得到新樣本得預測結果g(z)。 Min loss function : \\(\\sum\\pi_{{x}_i}(f(z)-g(z))^2+ \\Omega(g)\\) f(z)為真實outcome，\\(\\Omega(g)\\)為懲罰項目的為希望g能簡單一點，\\(\\pi_{{x}_i}\\)為「與\\({x}_i\\)相似與否」的核函數。極小化loss function 找出最適的g。 Select m features (e.g. forward selection, lasso) best describing the complex model outcome from the permuted data. 選擇一組你想理解對ML結果影響重要的特徵。 Fit a simple model, e.g. standard regression, predicting the predictions from the ML model with the m features, where observations are weighted by similarity to the to-be-explained observations. 對摸擬樣本\\({z}_i\\)與選好的幾個特徵進行加權迴歸(model g)，觀察各特徵係數值；係數值越大者越重要。 因為LIME很吃電腦資源所以下例程式碼中只隨機挑選了5個case（5個資料點）進行LIME set.seed(1234) sample_index = sample(1:nrow(wine_test), 5)#隨機選取幾個case sample_test = wine_test %&gt;% slice(sample_index) %&gt;% select(-quality) #分別拿掉5個case的outcome library(lime) rf_lime = lime(wine_train, results_rf)#lime rf_explain = explain(sample_test, rf_lime, n_features = 3,#只看三種特徵的組合 feature_select = &#39;highest_weights&#39;, labels = &#39;good&#39;) rf_explain#各case跑完lime的係數狀況 plot_features(rf_explain) plot_explanations(rf_explain) 以case 1 為例： Probablity為預測good的機率 feature_weight為-0.15表示當「0.40 &lt; volatile.acidity」時，每增加一單位酸度y便會造成減少0.16。 \\[y = \\left\\{\\begin{array}{ll} bad, &amp; \\mbox{if $y&lt;0$} \\\\ good, &amp; \\mbox{if $y&gt;0$} \\\\ \\end{array} \\right.\\] Explanation為\\(R^2\\) "],
["svm.html", "Chapter 8 SVM 概念 R-code example", " Chapter 8 SVM 概念 Features: \\(x_i\\), Outcome: \\(y_i\\in {0,1}\\), supporting hyperplane (SupH): any \\(w,b,\\delta\\) that can satisfy \\(w^Tx_i\\geq b+\\delta\\) iff \\(y_i&gt;0\\) and \\(w^Tx_i\\leq b-\\delta\\) iff \\(y_i&lt;0\\). The equality holds for some points in each area, i.e. at least one point touchs each plane. 數學上兩個supporting hyperplanes可以寫成： \\[supH_1: w^Tx=b+\\delta\\] \\[supH_2: w^Tx=b-\\delta\\] separating hypoerplane (SepH): the hyperplane that lies in the middle of the two SupHs. 數學上Separating hyperplane可以寫成： \\[w^Tx=b\\] margin: 兩個supHs的距離. 目標在極大化margin，使Supporting hyperplane分割空間越清楚越好，數學上來說它等同於極小化\\(\\|w\\|\\)，故可以寫成： \\[min_{\\{w,b,\\delta\\}}\\ \\|w\\|^2\\] 受限於： \\[when\\ (y_i=1,x_i),\\ w^Tx_i-(b+\\delta)\\geq 0\\] \\[when\\ (y_i=-1,x_i),\\ w^Tx_i-(b-\\delta)\\leq 0\\] 他們等同於： \\[\\begin{eqnarray*} when\\ y_i=1,\\ (w^{T}x_{i}-(b+\\delta))y_{i} &amp; \\geq &amp; 0\\\\ when\\ y_i=-1,\\ (w^{T}x_{i}-(b-\\delta))y_{i} &amp; \\geq &amp; 0 \\end{eqnarray*} \\] 也就是： \\[(w^Tx_i-b)y_i-\\delta \\geq 0\\] Algorithm Summary \\[min_{\\{w,b,\\delta\\}}\\ \\frac{1}{2}\\|w\\|^2\\] \\[s.t.\\ (w^Tx_i-b)y_i-\\delta\\geq 0\\] If \\((w^*,b^*,\\delta^*)\\) is a possible solution, \\(\\lambda (w^*,b^*,\\delta^*)\\) for \\(\\lambda&gt;0\\) will be a solution too. Therefore, we normalize \\(\\delta=1\\). \\[min_{\\{w,b,\\delta\\}}\\ \\frac{1}{2}\\|w\\|^2\\] \\[s.t.\\ (w^Tx_i-b)y_i-1\\geq 0\\] Then do the Lagrange Multiplier. Kernel Function The whole discusstion above is about linear data, if not, we should mapping data to a higher dimension by Kernel Function. \\[x_i^Tx_j\\rightarrow\\emptyset(x_i)^T\\emptyset(x_j)\\] The kernel function could be very complicated, but by inner product, it will be simple a lot. \\[K(x_i,x_j)\\rightarrow\\emptyset(x_i)^T\\emptyset(x_j)\\] \\[K(x_i,x_j)\\rightarrow\\exp(-\\frac{\\|x_i-x_j||^2}{2\\sigma^2})\\] The Non-Separable case In real world, it is hard to find a optimal separating hyperplane(OSH), we need to insert a error term to handle the case that support vectors overlap with SupHs. \\[w^Tx_i-b\\leq-1+\\xi_i\\ \\forall y_i=-1\\] \\[w^Tx_i-b\\geq+1-\\xi_i\\ \\forall y_i=+1\\] \\[\\xi_i\\geq0\\] and made a cost function(“c” is the weight of cost): \\[cost = c(\\sum_i\\xi_i)^k\\] then \\[min\\ \\frac{1}{2}\\|w\\|^2+c(\\sum_i\\xi_i)^k\\] \\[s.t.\\ (w^Tx_i-b)y_i-1+\\xi_i\\geq 0\\] R-code example Cross-Validation &amp; Pre processing as above Tuning parameters the tuneLength is the number of errors allowed results_svm = train(quality~., data=wine_train, method=&#39;svmLinear2&#39;, preProcess=c(&#39;center&#39;, &#39;scale&#39;), trControl=cv_opts, tuneLength=5, probability=TRUE) # to get probs along with classifications results_svm preds_svm = predict(results_svm, wine_test) confusionMatrix(preds_svm, good_observed, positive=&#39;good&#39;) Reference：http://www.cmlab.csie.ntu.edu.tw/~cyy/learning/tutorials/SVM2.pdf "],
["section-9.html", "Chapter 9 待新增", " Chapter 9 待新增 "],
["offical-tutorial.html", "A Offical tutorial", " A Offical tutorial bookdown repo bookdown webpage For your convenience, you may open the minimal bookdown template in new project in RStudio whenever you want to write down a book. "],
["python-on-rstudio.html", "B Python on RStudio", " B Python on RStudio library(reticulate) conda_create(&quot;m-team-machine-learning&quot;) 找到Rprofile.site的R根目錄 site_path = R.home(component = &quot;home&quot;) fname = file.path(site_path, &quot;etc&quot;, &quot;Rprofile.site&quot;) file.exists(fname) file.edit(fname) #file.edit(&quot;/Library/Frameworks/R.framework/Resources/Rprofile.site&quot;) 未來開python環境用法 library(reticulate) use_python(Sys.getenv(&quot;condaPythonPath&quot;), required = T) use_condaenv(&quot;m-team-machine-learning&quot;) Google API Installation https://developers.google.com/api-client-library/python/start/installation conda_install(envname = &quot;m-team-machine-learning&quot;, c(&quot;numpy&quot;,&quot;pandas&quot;)) conda_install(envname = &quot;m-team-machine-learning&quot;, &quot;keras&quot;) conda_install(envname=&quot;m-team-machine-learning&quot;, c(&quot;google-api-python-client&quot;, &quot;google-auth-httplib2&quot;, &quot;google-auth-oauthlib&quot;), pip=TRUE) "],
["ml-vv.html", "C ML_VV", " C ML_VV wine &lt;- read.csv(&quot;~/Dropbox/M-Team/ML/wine.csv&quot;) str(wine) library(caret) library(tidyverse) library(glmnet) library(class) library(randomForest) library(e1071) library(ggplot2) Regularized Regression set.seed(1234) # so that the indices will be the same when re-run trainIndices = createDataPartition(wine$quality, p=.8, list=F) wine_train = wine %&gt;% select(-free.sulfur.dioxide, -density, -color, -white) %&gt;% slice(trainIndices) wine_test = wine %&gt;% select(-free.sulfur.dioxide, -density, -color, -white) %&gt;% slice(-trainIndices) wine_trainplot = select(wine_train, -quality) %&gt;% preProcess(method=&#39;range&#39;) %&gt;% #標準化處理range =&gt; (x-min)/(max-min) predict(newdata= select(wine_train, -quality)) #利用predict函數顯示出處理好的矩陣 featurePlot(wine_trainplot, wine_train$quality, &#39;box&#39;) cv_opts = trainControl(method=&#39;cv&#39;, number=10) #定義模型訓練參數，劃分十組交叉驗證（使用repeatedcv可重複劃分） regreg_opts = expand.grid(.alpha = seq(.1, 1, length = 5), .lambda = seq(.1, .5, length = 5)) #25種組合(決定lamda重要度？) results_regreg = train(quality~., data=wine_train, method = &quot;glmnet&quot;, trControl = cv_opts, preProcess = c(&quot;center&quot;, &quot;scale&quot;), #指定數據標準化，&quot;center&quot;和&quot;scale&quot;。其中center表示預測變量減去均值 tuneGrid = regreg_opts) results_regreg #kappa是一統計量指標衡量預測值與實質的差距 ggplot(results_regreg) preds_regreg = predict(results_regreg, wine_test) good_observed = wine_test$quality confusionMatrix(preds_regreg, good_observed, positive=&#39;good&#39;) The lower bound (and p-value) suggests we are statistically predicting better than the No Information Rate (i.e., just guessing the more prevalent ‘Bad’ category) -&gt; 猜好的比猜壞的還強 confusionMatrix(preds_regreg, good_observed, positive=&#39;good&#39;, mode=&#39;prec_recall&#39;) k-nearest Neighbors knn_opts = data.frame(k=c(seq(3, 11, 2), 25, 51, 101)) knn_opts results_knn = train(quality~., data=wine_train, method=&#39;knn&#39;, preProcess=c(&#39;center&#39;, &#39;scale&#39;), trControl=cv_opts, tuneGrid = knn_opts) results_knn preds_knn = predict(results_knn, wine_test) confusionMatrix(preds_knn, good_observed, positive=&#39;good&#39;) Neural networks results_nnet = train(quality~., data=wine_train, method=&#39;avNNet&#39;, trControl=cv_opts, preProcess=c(&#39;center&#39;, &#39;scale&#39;), tuneLength=3, trace=F, maxit=3) results_nnet ggplot(results_nnet) preds_nnet = predict(results_nnet, wine_test) confusionMatrix(preds_nnet, good_observed, positive=&#39;good&#39;) Support Vector Machines 參考資料：https://goo.gl/cMRJLA 主要概念：SVM把原始資料投影到更高維度的空間裡，使得原本在低維度找不到切分的點，變成在高維度能夠找到一個超平面(hyperplane)，去切分。 而這個分界線會尋找最好的（距離兩分類最遠，也就是最明顯劃分）那個維度去切。 kernel function 參考資料：https://goo.gl/APV7NP example results_svm = train(quality~., data=wine_train, method=&#39;svmLinear2&#39;, preProcess=c(&#39;center&#39;, &#39;scale&#39;), trControl=cv_opts, tuneLength=5, probability=TRUE) # to get probs along with classifications results_svm preds_svm = predict(results_svm, wine_test) confusionMatrix(preds_svm, good_observed, positive=&#39;good&#39;) 優點： 1.各式樣的資料皆能有不錯的預測表現 2.可以將變數做線性組合增強預測能力 缺點： 黑箱作業（不知道其中到底使用了什麼樣的映射函數） "],
["google-api.html", "D Google API", " D Google API Environment setup library(reticulate) use_python(&quot;/Users/martin/anaconda3/envs/course_webapp/bin/python&quot;, required = T) use_condaenv(&quot;course_webapp&quot;) Google API Installation conda_install(envname=&quot;course_webapp&quot;, c(&quot;google-api-python-client&quot;, &quot;google-auth-httplib2&quot;, &quot;google-auth-oauthlib&quot;), pip=TRUE) Calendar Example https://developers.google.com/calendar/quickstart/python save as quickstart_calendar.py from __future__ import print_function import datetime import pickle import os.path from googleapiclient.discovery import build from google_auth_oauthlib.flow import InstalledAppFlow from google.auth.transport.requests import Request # If modifying these scopes, delete the file token.pickle. SCOPES = [&#39;https://www.googleapis.com/auth/calendar.readonly&#39;] def main(): &quot;&quot;&quot;Shows basic usage of the Google Calendar API. Prints the start and name of the next 10 events on the user&#39;s calendar. &quot;&quot;&quot; creds = None # The file token.pickle stores the user&#39;s access and refresh tokens, and is # created automatically when the authorization flow completes for the first # time. if os.path.exists(&#39;token.pickle&#39;): with open(&#39;token.pickle&#39;, &#39;rb&#39;) as token: creds = pickle.load(token) # If there are no (valid) credentials available, let the user log in. if not creds or not creds.valid: if creds and creds.expired and creds.refresh_token: creds.refresh(Request()) else: flow = InstalledAppFlow.from_client_secrets_file( &#39;credentials.json&#39;, SCOPES) creds = flow.run_local_server() # Save the credentials for the next run with open(&#39;token.pickle&#39;, &#39;wb&#39;) as token: pickle.dump(creds, token) service = build(&#39;calendar&#39;, &#39;v3&#39;, credentials=creds) # Call the Calendar API now = datetime.datetime.utcnow().isoformat() + &#39;Z&#39; # &#39;Z&#39; indicates UTC time print(&#39;Getting the upcoming 10 events&#39;) events_result = service.events().list(calendarId=&#39;primary&#39;, timeMin=now, maxResults=10, singleEvents=True, orderBy=&#39;startTime&#39;).execute() events = events_result.get(&#39;items&#39;, []) if not events: print(&#39;No upcoming events found.&#39;) for event in events: start = event[&#39;start&#39;].get(&#39;dateTime&#39;, event[&#39;start&#39;].get(&#39;date&#39;)) print(start, event[&#39;summary&#39;]) if __name__ == &#39;__main__&#39;: main() source quickstart_calendar.py source_python(&quot;quickstart_calendar.py&quot;) "]
]
